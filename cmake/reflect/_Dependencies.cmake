# This file will be regenerated by `mulle-sourcetree-to-cmake` via
# `mulle-sde reflect` and any edits will be lost.
#
# This file will be included by cmake/share/Files.cmake
#
# Disable generation of this file with:
#
# mulle-sde environment set MULLE_SOURCETREE_TO_CMAKE_DEPENDENCIES_FILE DISABLE
#
if( MULLE_TRACE_INCLUDE)
   message( STATUS "# Include \"${CMAKE_CURRENT_LIST_FILE}\"" )
endif()

#
# Generated from sourcetree: 8513CFB7-F1C6-4005-9D97-ECE6F8CA3AFD;objc-compat;no-all-load,no-import,no-link;
# Disable with : `mulle-sourcetree mark objc-compat no-header`
# Disable for this platform: `mulle-sourcetree mark objc-compat no-cmake-platform-${MULLE_UNAME}`
# Disable for a sdk: `mulle-sourcetree mark objc-compat no-cmake-sdk-<name>`
#
if( NOT OBJC__COMPAT_HEADER)
   find_file( OBJC__COMPAT_HEADER NAMES objc-compat.h objc-compat/objc-compat.h)
   message( STATUS "OBJC__COMPAT_HEADER is ${OBJC__COMPAT_HEADER}")

   #
   # Add OBJC__COMPAT_HEADER to HEADER_ONLY_LIBRARIES list.
   # Disable with: `mulle-sourcetree mark objc-compat no-cmake-add`
   #
   set( HEADER_ONLY_LIBRARIES
      ${OBJC__COMPAT_HEADER}
      ${HEADER_ONLY_LIBRARIES}
   )
   if( OBJC__COMPAT_HEADER)
      #
      # Inherit ObjC loader and link dependency info.
      # Disable with: `mulle-sourcetree mark objc-compat no-cmake-inherit`
      #
      get_filename_component( _TMP_OBJC__COMPAT_ROOT "${OBJC__COMPAT_HEADER}" DIRECTORY)
      get_filename_component( _TMP_OBJC__COMPAT_NAME "${_TMP_OBJC__COMPAT_ROOT}" NAME)
      get_filename_component( _TMP_OBJC__COMPAT_ROOT "${_TMP_OBJC__COMPAT_ROOT}" DIRECTORY)
      get_filename_component( _TMP_OBJC__COMPAT_ROOT "${_TMP_OBJC__COMPAT_ROOT}" DIRECTORY)
      #
      # Search for "Definitions.cmake" and "DependenciesAndLibraries.cmake" to include.
      # Disable with: `mulle-sourcetree mark objc-compat no-cmake-dependency`
      #
      foreach( _TMP_OBJC__COMPAT_NAME IN LISTS _TMP_OBJC__COMPAT_NAME)
         set( _TMP_OBJC__COMPAT_DIR "${_TMP_OBJC__COMPAT_ROOT}/include/${_TMP_OBJC__COMPAT_NAME}/cmake")
         # use explicit path to avoid "surprises"
         if( IS_DIRECTORY "${_TMP_OBJC__COMPAT_DIR}")
            list( INSERT CMAKE_MODULE_PATH 0 "${_TMP_OBJC__COMPAT_DIR}")
            # we only want top level INHERIT_OBJC_LOADERS, so disable them
            if( NOT NO_INHERIT_OBJC_LOADERS)
               set( NO_INHERIT_OBJC_LOADERS OFF)
            endif()
            list( APPEND _TMP_INHERIT_OBJC_LOADERS ${NO_INHERIT_OBJC_LOADERS})
            set( NO_INHERIT_OBJC_LOADERS ON)
            #
            include( "${_TMP_OBJC__COMPAT_DIR}/DependenciesAndLibraries.cmake" OPTIONAL)
            #
            list( GET _TMP_INHERIT_OBJC_LOADERS -1 NO_INHERIT_OBJC_LOADERS)
            list( REMOVE_AT _TMP_INHERIT_OBJC_LOADERS -1)
            list( REMOVE_ITEM CMAKE_MODULE_PATH "${_TMP_OBJC__COMPAT_DIR}")
            #
            unset( OBJC__COMPAT_DEFINITIONS)
            include( "${_TMP_OBJC__COMPAT_DIR}/Definitions.cmake" OPTIONAL)
            list( APPEND INHERITED_DEFINITIONS ${OBJC__COMPAT_DEFINITIONS})
            break()
         else()
            message( STATUS "${_TMP_OBJC__COMPAT_DIR} not found")
         endif()
      endforeach()
   else()
      # Disable with: `mulle-sourcetree mark objc-compat no-require`
      message( SEND_ERROR "OBJC__COMPAT_HEADER was not found")
   endif()
endif()



#
# Generated from sourcetree: EBE6754D-DEC7-4228-B64D-4FEB9084943B;mulle-core;no-all-load,no-cmake-loader,no-cmake-searchpath,no-import;
# Disable with : `mulle-sourcetree mark mulle-core no-link`
# Disable for this platform: `mulle-sourcetree mark mulle-core no-cmake-platform-${MULLE_UNAME}`
# Disable for a sdk: `mulle-sourcetree mark mulle-core no-cmake-sdk-<name>`
#
if( COLLECT_DEPENDENCY_LIBRARIES_AS_NAMES)
   list( APPEND DEPENDENCY_LIBRARIES "mulle-core")
else()
   if( NOT MULLE__CORE_LIBRARY)
      find_library( MULLE__CORE_LIBRARY NAMES
         ${CMAKE_STATIC_LIBRARY_PREFIX}mulle-core${CMAKE_DEBUG_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
         ${CMAKE_STATIC_LIBRARY_PREFIX}mulle-core${CMAKE_STATIC_LIBRARY_SUFFIX}
         mulle-core
         NO_CMAKE_SYSTEM_PATH NO_SYSTEM_ENVIRONMENT_PATH
      )
      if( NOT MULLE__CORE_LIBRARY AND NOT DEPENDENCY_IGNORE_SYSTEM_LIBARIES)
         find_library( MULLE__CORE_LIBRARY NAMES
            ${CMAKE_STATIC_LIBRARY_PREFIX}mulle-core${CMAKE_DEBUG_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
            ${CMAKE_STATIC_LIBRARY_PREFIX}mulle-core${CMAKE_STATIC_LIBRARY_SUFFIX}
            mulle-core
         )
      endif()
      message( STATUS "MULLE__CORE_LIBRARY is ${MULLE__CORE_LIBRARY}")
      #
      # The order looks ascending, but due to the way this file is read
      # it ends up being descending, which is what we need.
      #
      if( MULLE__CORE_LIBRARY)
         #
         # Add MULLE__CORE_LIBRARY to DEPENDENCY_LIBRARIES list.
         # Disable with: `mulle-sourcetree mark mulle-core no-cmake-add`
         #
         list( APPEND DEPENDENCY_LIBRARIES ${MULLE__CORE_LIBRARY})
         #
         # Inherit information from dependency.
         # Encompasses: no-cmake-searchpath,no-cmake-dependency,no-cmake-loader
         # Disable with: `mulle-sourcetree mark mulle-core no-cmake-inherit`
         #
         # temporarily expand CMAKE_MODULE_PATH
         get_filename_component( _TMP_MULLE__CORE_ROOT "${MULLE__CORE_LIBRARY}" DIRECTORY)
         get_filename_component( _TMP_MULLE__CORE_ROOT "${_TMP_MULLE__CORE_ROOT}" DIRECTORY)
         #
         #
         # Search for "Definitions.cmake" and "DependenciesAndLibraries.cmake" to include.
         # Disable with: `mulle-sourcetree mark mulle-core no-cmake-dependency`
         #
         foreach( _TMP_MULLE__CORE_NAME "mulle-core")
            set( _TMP_MULLE__CORE_DIR "${_TMP_MULLE__CORE_ROOT}/include/${_TMP_MULLE__CORE_NAME}/cmake")
            # use explicit path to avoid "surprises"
            if( IS_DIRECTORY "${_TMP_MULLE__CORE_DIR}")
               list( INSERT CMAKE_MODULE_PATH 0 "${_TMP_MULLE__CORE_DIR}")
               #
               include( "${_TMP_MULLE__CORE_DIR}/DependenciesAndLibraries.cmake" OPTIONAL)
               #
               list( REMOVE_ITEM CMAKE_MODULE_PATH "${_TMP_MULLE__CORE_DIR}")
               #
               unset( MULLE__CORE_DEFINITIONS)
               include( "${_TMP_MULLE__CORE_DIR}/Definitions.cmake" OPTIONAL)
               list( APPEND INHERITED_DEFINITIONS ${MULLE__CORE_DEFINITIONS})
               break()
            else()
               message( STATUS "${_TMP_MULLE__CORE_DIR} not found")
            endif()
         endforeach()
      else()
         # Disable with: `mulle-sourcetree mark mulle-core no-require-link`
         message( SEND_ERROR "MULLE__CORE_LIBRARY was not found")
      endif()
   endif()
endif()
